from aiogram import Bot, Dispatcher, executor, types
import asyncio
import logging
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import pandas as pd
import matplotlib.pyplot as plt
import io

from keyboards import *
import texts


api = '7793599961:AAF9TpoAN_-gBdbV4q_-I02M0xU_FX8L2Ik'
logging.basicConfig(level=logging.INFO)
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def start(message):
    await message.answer(f'‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' + texts.start, reply_markup=start_kb)


@dp.message_handler(Text(equals=['üìã –ú–µ–Ω—é']))
async def send_menu(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    await message.answer(
        "üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n",
        reply_markup=start_kb
    )


@dp.message_handler(Text(equals=['‚ÑπÔ∏è –û –Ω–∞—Å']))
async def send_info(message):
    await message.answer(texts.about_as, parse_mode='HTML', reply_markup=start_kb)


@dp.message_handler(Text(equals=['‚ùì –ü–æ–º–æ—â—å']))
async def help_send(message):
    await message.answer('<b>–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã</b>', parse_mode='HTML', reply_markup=buy_kb)


@dp.message_handler(Text(equals=['üìä –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è']))
async def send_price_list(message):
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É</b>', parse_mode='HTML', reply_markup=catalog_kb)


@dp.message_handler(content_types=[types.ContentType.DOCUMENT])
async def handle_file(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª - —ç—Ç–æ CSV
    if message.document.mime_type == 'text/csv':
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(message.document.file_id)
        file_path = file_info.file_path
        file = await bot.download_file(file_path)

        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ CSV –≤ pandas
        data = pd.read_csv(file)

        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ –¥–∞—Ç—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        dates = data.columns.values[1:]  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–∞—Ç—ã
        values = data.iloc[:, 1:].values  # –ë–µ—Ä–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞

        # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        for i, row in enumerate(values):
            plt.plot(dates, row, label=f'–°—Ç—Ä–æ–∫–∞ {i + 1}')

        plt.title('–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV')
        plt.xlabel('–î–∞—Ç—ã')
        plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏—è')
        plt.grid(True)

        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã —Å–ø—Ä–∞–≤–∞ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞
        plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))  # –õ–µ–≥–µ–Ω–¥–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        image_stream = io.BytesIO()
        plt.savefig(image_stream, format='png', bbox_inches='tight')  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        image_stream.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_photo(photo=image_stream)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å
        plt.close()
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
