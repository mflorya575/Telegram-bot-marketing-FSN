from aiogram import Bot, Dispatcher, executor, types
import asyncio
import logging
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import pandas as pd
import matplotlib.pyplot as plt
import io

from keyboards import *
import texts


api = '7793599961:AAF9TpoAN_-gBdbV4q_-I02M0xU_FX8L2Ik'
logging.basicConfig(level=logging.INFO)
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def start(message):
    await message.answer(f'‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' + texts.start, reply_markup=start_kb)


@dp.message_handler(Text(equals=['üìã –ú–µ–Ω—é']))
async def send_menu(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    await message.answer(
        "üìã –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥:\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n",
        reply_markup=start_kb
    )


@dp.message_handler(Text(equals=['‚ÑπÔ∏è –û –Ω–∞—Å']))
async def send_info(message):
    await message.answer(texts.about_as, parse_mode='HTML', reply_markup=start_kb)


@dp.message_handler(Text(equals=['‚ùì –ü–æ–º–æ—â—å']))
async def help_send(message):
    await message.answer('<b>–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã</b>', parse_mode='HTML', reply_markup=buy_kb)


@dp.message_handler(Text(equals=['üìä –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è']))
async def send_price_list(message):
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —É—Å–ª—É–≥—É</b>', parse_mode='HTML', reply_markup=catalog_kb)


@dp.message_handler(content_types=[types.ContentType.DOCUMENT])
async def handle_file(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª - —ç—Ç–æ CSV
    if message.document.mime_type == 'text/csv':
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(message.document.file_id)
        file_path = file_info.file_path
        file = await bot.download_file(file_path)

        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ CSV –≤ pandas
        data = pd.read_csv(file)

        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ –¥–∞—Ç—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        dates = data.columns.values[1:]  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–∞—Ç—ã
        values = data.iloc[:, 1:].values  # –ë–µ—Ä–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞

        # –ü–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫: –ª–∏–Ω–µ–π–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        fig, ax = plt.subplots(figsize=(10, 6))
        for i, row in enumerate(values):
            ax.plot(dates, row, label=f'–°—Ç—Ä–æ–∫–∞ {i + 1}')

        ax.set_title('–õ–∏–Ω–µ–π–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV')
        ax.set_xlabel('–î–∞—Ç—ã')
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏—è')
        ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))  # –õ–µ–≥–µ–Ω–¥–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞
        ax.grid(True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        line_chart_stream = io.BytesIO()
        plt.savefig(line_chart_stream, format='png', bbox_inches='tight')
        line_chart_stream.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_photo(photo=line_chart_stream)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
        plt.close(fig)

        # –í—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫: —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (Bar Chart)
        fig, ax = plt.subplots(figsize=(10, 6))
        summed_values = data.iloc[:, 1:].sum()  # –°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        ax.bar(dates, summed_values)
        ax.set_title('–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—É–º–º–∞—Ä–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º')
        ax.set_xlabel('–î–∞—Ç—ã')
        ax.set_ylabel('–°—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        bar_chart_stream = io.BytesIO()
        plt.savefig(bar_chart_stream, format='png', bbox_inches='tight')
        bar_chart_stream.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_photo(photo=bar_chart_stream)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫
        plt.close(fig)

        # –¢—Ä–µ—Ç–∏–π –≥—Ä–∞—Ñ–∏–∫: –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (Pie Chart)
        fig, ax = plt.subplots(figsize=(10, 6))
        total_values = summed_values  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—ã –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        ax.pie(total_values, labels=dates, autopct='%1.1f%%', startangle=90)
        ax.set_title('–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ—Ç–∏–π –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        pie_chart_stream = io.BytesIO()
        plt.savefig(pie_chart_stream, format='png', bbox_inches='tight')
        pie_chart_stream.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_photo(photo=pie_chart_stream)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–µ—Ç–∏–π –≥—Ä–∞—Ñ–∏–∫
        plt.close(fig)
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
