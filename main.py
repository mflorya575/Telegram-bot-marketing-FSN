import aiohttp
from aiogram import Bot, Dispatcher, executor, types
import asyncio
import logging
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import pandas as pd
import matplotlib.pyplot as plt
import io
from sklearn.tree import DecisionTreeClassifier, plot_tree
import requests as requests
from bs4 import BeautifulSoup

from keyboards import *
import texts


api = '7793599961:AAF9TpoAN_-gBdbV4q_-I02M0xU_FX8L2Ik'
logging.basicConfig(level=logging.INFO)
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç–∞—Ç—å–∏
article_links = []

# URL —Å–∞–π—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
URL = "https://www.sostav.ru/news/marketing"


@dp.message_handler(commands=['start'])
async def start(message):
    await message.answer(f'‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n' + texts.start, reply_markup=start_kb)


@dp.message_handler(Text(equals=['üìã –ú–µ–Ω—é']))
async def send_menu(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    await message.answer(
        "üìã <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.\n"
        "/parse - –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π. –ó–∞—Ç–µ–º –º–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.\n",
        reply_markup=start_kb, parse_mode='HTML'
    )


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    help_text = (
        "<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.\n"
        "/parse - –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π. –ó–∞—Ç–µ–º –º–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.\n"
    )
    await message.answer(help_text, parse_mode='HTML')


@dp.message_handler(Text(equals=['‚ÑπÔ∏è –û –Ω–∞—Å']))
async def send_info(message):
    await message.answer(texts.about_as, parse_mode='HTML', reply_markup=start_kb)


@dp.message_handler(Text(equals=['‚ùì –ü–æ–º–æ—â—å']))
async def help_send(message):
    await message.answer('<b>–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã</b>', parse_mode='HTML', reply_markup=buy_kb)

# ----------------------------------------------------


@dp.message_handler(commands=['parse'])
async def manual_parse(message: types.Message):
    await parse_new_articles()
    await message.reply("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
async def parse_new_articles():
    global article_links
    logging.info("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞...")

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(URL) as response:
                logging.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                if response.status == 200:
                    html = await response.text()

                    # –í—ã–≤–æ–¥ –ø–µ—Ä–≤—ã—Ö 500 —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    logging.info("HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %s", html[:500])

                    soup = BeautifulSoup(html, "html.parser")

                    # –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
                    articles = soup.find_all('a', class_='title')
                    logging.info(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")

                    # –ü–µ—á–∞—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    logging.info("–ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–∞—Ç–µ–π:")
                    for article in articles:
                        logging.info(article.get_text(strip=True))

                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –Ω–æ–≤—ã–º–∏
                    article_links = []
                    for article in articles[:10]:  # –í–æ–∑—å–º–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç–∞—Ç–µ–π
                        title = article.get_text(strip=True)  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏, –æ—á–∏—â–∞—è –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ —Å 'http'
                        link = article['href'] if article['href'].startswith('http') else URL + article['href']

                        # –ó–∞–º–µ–Ω—è–µ–º 'news/marketing' –Ω–∞ 'publication/' –≤ —Å—Å—ã–ª–∫–µ
                        if 'news/marketing' in link:
                            link = link.replace('news/marketing', '')

                        article_links.append((title, link))  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Å—ã–ª–∫—É –≤ —Å–ø–∏—Å–æ–∫
                        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç—å—è: {title} - {link}")
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω–æ–≤—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
def get_catalog_keyboard():
    catalog_kb = InlineKeyboardMarkup()
    for title, link in article_links:
        catalog_kb.add(InlineKeyboardButton(text=title, url=link))
    return catalog_kb


# –•—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
@dp.message_handler(Text(equals=['üìä –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è']))
async def send_price_list(message: types.Message):
    if not article_links:
        await message.answer('–°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    else:
        await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Å—Ç–∞—Ç—å—é</b>', parse_mode='HTML',
                             reply_markup=get_catalog_keyboard())


# –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ —Å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é –≤ 1 —á–∞—Å
async def on_startup(dp):
    scheduler = AsyncIOScheduler()
    scheduler.add_job(parse_new_articles, 'interval', hours=1)  # –ü–∞—Ä—Å–∏–º —Å–∞–π—Ç —Ä–∞–∑ –≤ —á–∞—Å
    scheduler.start()

#------------------------------------------------------


@dp.message_handler(content_types=[types.ContentType.DOCUMENT])
async def handle_file(message: types.Message):
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file_info = await bot.get_file(message.document.file_id)
    file_path = file_info.file_path
    file = await bot.download_file(file_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª - —ç—Ç–æ CSV
    if message.document.mime_type == 'text/csv':
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ CSV –≤ pandas
        data = pd.read_csv(io.BytesIO(file.read()))

        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ –¥–∞—Ç—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        dates = data.columns.values[1:]  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–∞—Ç—ã
        values = data.iloc[:, 1:].values  # –ë–µ—Ä–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞

        # –ü–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫: –ª–∏–Ω–µ–π–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        fig, ax = plt.subplots(figsize=(10, 6))
        for i, row in enumerate(values):
            ax.plot(dates, row, label=f'–°—Ç—Ä–æ–∫–∞ {i + 1}')

        ax.set_title('–õ–∏–Ω–µ–π–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV')
        ax.set_xlabel('–î–∞—Ç—ã')
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏—è')
        ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))  # –õ–µ–≥–µ–Ω–¥–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞
        ax.grid(True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        line_chart_stream = io.BytesIO()
        plt.savefig(line_chart_stream, format='png', bbox_inches='tight')
        line_chart_stream.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_photo(photo=line_chart_stream)
        plt.close(fig)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≥—Ä–∞—Ñ–∏–∫

        # –í—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫: —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (Bar Chart)
        fig, ax = plt.subplots(figsize=(10, 6))
        summed_values = data.iloc[:, 1:].sum()  # –°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        ax.bar(dates, summed_values)
        ax.set_title('–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—É–º–º–∞—Ä–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º')
        ax.set_xlabel('–î–∞—Ç—ã')
        ax.set_ylabel('–°—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        bar_chart_stream = io.BytesIO()
        plt.savefig(bar_chart_stream, format='png', bbox_inches='tight')
        bar_chart_stream.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_photo(photo=bar_chart_stream)
        plt.close(fig)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫

        # –¢—Ä–µ—Ç–∏–π –≥—Ä–∞—Ñ–∏–∫: –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ (Pie Chart)
        fig, ax = plt.subplots(figsize=(10, 6))
        total_values = summed_values  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—ã –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        ax.pie(total_values, labels=dates, autopct='%1.1f%%', startangle=90)
        ax.set_title('–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ—Ç–∏–π –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        pie_chart_stream = io.BytesIO()
        plt.savefig(pie_chart_stream, format='png', bbox_inches='tight')
        pie_chart_stream.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç–∏–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_photo(photo=pie_chart_stream)
        plt.close(fig)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–µ—Ç–∏–π –≥—Ä–∞—Ñ–∏–∫

        # –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞ (Gantt Chart)
        fig, ax = plt.subplots(figsize=(10, 6))
        for i, row in enumerate(values):
            ax.barh(dates, row, label=f'–°—Ç—Ä–æ–∫–∞ {i + 1}')

        ax.set_title('–î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞')
        ax.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏—è')
        ax.set_ylabel('–î–∞—Ç—ã')
        ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
        plt.xticks(rotation=45)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        gantt_chart_stream = io.BytesIO()
        plt.savefig(gantt_chart_stream, format='png', bbox_inches='tight')
        gantt_chart_stream.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_photo(photo=gantt_chart_stream)
        plt.close(fig)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞

        # –î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - —ç—Ç–æ —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –ø—Ä–∏–∑–Ω–∞–∫–∏
        if values.shape[1] > 1:
            X = data.iloc[:, 1:].values  # –ü—Ä–∏–∑–Ω–∞–∫–∏
            y = data.iloc[:, 0].values    # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

            # –û–±—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π
            clf = DecisionTreeClassifier(random_state=0)
            clf.fit(X, y)

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π
            fig, ax = plt.subplots(figsize=(10, 6))
            plot_tree(clf, filled=True, ax=ax, feature_names=data.columns[1:], class_names=list(map(str, set(y))), rounded=True)
            ax.set_title('–î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            tree_stream = io.BytesIO()
            plt.savefig(tree_stream, format='png', bbox_inches='tight')
            tree_stream.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer_photo(photo=tree_stream)
            plt.close(fig)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª - —ç—Ç–æ Excel
    elif message.document.mime_type in ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                                         'application/vnd.ms-excel']:
        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ Excel –≤ pandas
        data = pd.read_excel(io.BytesIO(file.read()), header=0)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if data.empty:
            await message.reply("–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —ç—Ç–æ –¥–∞—Ç—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ ‚Äî —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        dates = data.columns[1:]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–∞—Ç–∞–º–∏
        values = data.iloc[:, 1:].values  # –ë–µ—Ä–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if len(dates) != values.shape[1]:
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–π.")
            return

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        fig1, ax1 = plt.subplots(figsize=(10, 6))
        for i, row in enumerate(values):
            ax1.plot(dates, row, label=f'–°—Ç—Ä–æ–∫–∞ {i + 1}')

        ax1.set_title('–õ–∏–Ω–µ–π–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel')
        ax1.set_xlabel('–î–∞—Ç—ã')
        ax1.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏—è')
        ax1.legend(loc='center left', bbox_to_anchor=(1, 0.5))
        ax1.grid(True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        linear_stream = io.BytesIO()
        plt.tight_layout()
        plt.savefig(linear_stream, format='png', bbox_inches='tight')
        linear_stream.seek(0)
        await message.answer_photo(photo=linear_stream)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        plt.close(fig1)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        fig2, ax2 = plt.subplots(figsize=(10, 6))
        summed_values = values.sum(axis=0)  # –°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        ax2.bar(dates, summed_values)
        ax2.set_title('–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—É–º–º–∞—Ä–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º')
        ax2.set_xlabel('–î–∞—Ç—ã')
        ax2.set_ylabel('–°—É–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        bar_stream = io.BytesIO()
        plt.tight_layout()
        plt.savefig(bar_stream, format='png', bbox_inches='tight')
        bar_stream.seek(0)
        await message.answer_photo(photo=bar_stream)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫
        plt.close(fig2)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        fig3, ax3 = plt.subplots(figsize=(10, 6))
        total_values = summed_values  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—ã –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        ax3.pie(total_values, labels=dates, autopct='%1.1f%%', startangle=90)
        ax3.set_title('–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –¥–∞—Ç–∞–º')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä—É–≥–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        pie_stream = io.BytesIO()
        plt.tight_layout()
        plt.savefig(pie_stream, format='png', bbox_inches='tight')
        pie_stream.seek(0)
        await message.answer_photo(photo=pie_stream)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä—É–≥–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫
        plt.close(fig3)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É

        # –î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞
        fig, ax = plt.subplots(figsize=(10, 6))
        for i, row in enumerate(values):
            ax.barh(dates, row, label=f'–°—Ç—Ä–æ–∫–∞ {i + 1}')

        ax.set_title('–î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞')
        ax.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏—è')
        ax.set_ylabel('–î–∞—Ç—ã')
        ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
        plt.xticks(rotation=45)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        gantt_chart_stream = io.BytesIO()
        plt.savefig(gantt_chart_stream, format='png', bbox_inches='tight')
        gantt_chart_stream.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer_photo(photo=gantt_chart_stream)
        plt.close(fig)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ì–∞–Ω—Ç–∞

        # –î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π
        if values.shape[1] > 1:
            X = data.iloc[:, 1:].values  # –ü—Ä–∏–∑–Ω–∞–∫–∏
            y = data.iloc[:, 0].values    # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

            # –û–±—É—á–∞–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π
            clf = DecisionTreeClassifier(random_state=0)
            clf.fit(X, y)

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π
            fig, ax = plt.subplots(figsize=(10, 6))
            plot_tree(clf, filled=True, ax=ax, feature_names=data.columns[1:], class_names=list(map(str, set(y))), rounded=True)
            ax.set_title('–î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            tree_stream = io.BytesIO()
            plt.savefig(tree_stream, format='png', bbox_inches='tight')
            tree_stream.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer_photo(photo=tree_stream)
            plt.close(fig)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π

    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–ª–∏ Excel.")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
